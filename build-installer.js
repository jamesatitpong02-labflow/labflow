#!/usr/bin/env node

/**
 * LabFlow Clinic Installer Builder
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå installer .exe ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á LabFlow Clinic Installer...\n');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const requiredFiles = [
  'public/iconlabflow.ico',
  'build/installer.nsh',
  'package.json'
];

console.log('üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô...');
for (const file of requiredFiles) {
  if (!fs.existsSync(file)) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${file}`);
    process.exit(1);
  }
  console.log(`‚úÖ ${file}`);
}

try {
  // 1. Clean previous builds
  console.log('\nüßπ ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå build ‡πÄ‡∏Å‡πà‡∏≤...');
  if (fs.existsSync('dist')) {
    execSync('rmdir /s /q dist', { stdio: 'inherit' });
  }
  if (fs.existsSync('dist-electron')) {
    execSync('rmdir /s /q dist-electron', { stdio: 'inherit' });
  }

  // 2. Install dependencies
  console.log('\nüì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies...');
  execSync('npm install', { stdio: 'inherit' });

  // 3. Build frontend
  console.log('\nüèóÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á build frontend...');
  execSync('npm run build', { stdio: 'inherit' });

  // 4. Build installer
  console.log('\nüì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á installer...');
  execSync('npx electron-builder --win --x64', { stdio: 'inherit' });

  // 5. Check output files
  console.log('\nüìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô...');
  const distDir = 'dist-electron';
  
  if (fs.existsSync(distDir)) {
    const files = fs.readdirSync(distDir);
    console.log('\n‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:');
    
    files.forEach(file => {
      const filePath = path.join(distDir, file);
      const stats = fs.statSync(filePath);
      const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
      
      if (file.includes('Setup')) {
        console.log(`üéØ ${file} (${sizeInMB} MB) - INSTALLER`);
      } else if (file.includes('portable')) {
        console.log(`üì± ${file} (${sizeInMB} MB) - PORTABLE`);
      } else {
        console.log(`üìÑ ${file} (${sizeInMB} MB)`);
      }
    });

    // Find installer file
    const installerFile = files.find(f => f.includes('Setup') && f.endsWith('.exe'));
    if (installerFile) {
      console.log(`\nüéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á installer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      console.log(`üìÇ ‡πÑ‡∏ü‡∏•‡πå: ${path.join(distDir, installerFile)}`);
      console.log(`\nüìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:`);
      console.log(`1. ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå ${installerFile} ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ`);
      console.log(`2. ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á`);
      console.log(`3. ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á desktop icon ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥`);
      console.log(`4. ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`);
    }
  } else {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dist-electron');
    process.exit(1);
  }

} catch (error) {
  console.error('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  console.log('\nüîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:');
  console.log('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Node.js ‡πÅ‡∏•‡∏∞ npm ‡πÅ‡∏•‡πâ‡∏ß');
  console.log('2. ‡∏£‡∏±‡∏ô npm install ‡∏Å‡πà‡∏≠‡∏ô');
  console.log('3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ icon file ‡πÉ‡∏ô public/iconlabflow.ico');
  console.log('4. ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô npm run build ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å');
  process.exit(1);
}

console.log('\nüéä ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á installer!');
